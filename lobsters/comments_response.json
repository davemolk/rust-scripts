{"short_id":"pci3eh","short_id_url":"https://lobste.rs/s/pci3eh","created_at":"2024-05-06T11:30:01.000-05:00","title":"Lila: a Lil Interpreter in Awk","url":"https://beyondloom.com/blog/lila.html","score":43,"flags":0,"comment_count":7,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/pci3eh/lila_lil_interpreter_awk","submitter_user":"Internet_Janitor","user_is_author":true,"tags":["art","plt"],"comments":[{"short_id":"zodr3n","short_id_url":"https://lobste.rs/c/zodr3n","created_at":"2024-05-06T16:30:52.000-05:00","updated_at":"2024-05-06T16:30:52.000-05:00","is_deleted":false,"is_moderated":false,"score":9,"flags":0,"parent_comment":null,"comment":"\u003cp\u003eI’ve dipped my toe in Awk programming previously, and while there’s parts of awk that feel like any modern scripting language (or even better, for the tasks awk was designed for), there’s also weird bits that aggressively remind me it was designed in the 1970s:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003estring functions generally don’t return strings; for example, Python’s \u003ccode\u003eparts = text.split()\u003c/code\u003e in awk is \u003ccode\u003esplit(text, parts)\u003c/code\u003e and returns the new length of \u003ccode\u003eparts\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003eyou can declare functions, but not local variables; apparently the convention is to add extra function arguments and just never provide them at the call site, so the function can clobber them\u003c/li\u003e\n\u003cli\u003eall strings are byte strings, even in a UTF-8 locale (this is not true in \u003ccode\u003egawk\u003c/code\u003e, but \u003ccode\u003emawk\u003c/code\u003e is so much faster in general)\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eDespite all those things, awk is still a lot more pleasant that writing POSIX shell scripts for any kind of logic or computation, and very nearly as portable. A+, would use again.\u003c/p\u003e\n","comment_plain":"I've dipped my toe in Awk programming previously, and while there's parts of awk that feel like any modern scripting language (or even better, for the tasks awk was designed for), there's also weird bits that aggressively remind me it was designed in the 1970s:\r\n\r\n  - string functions generally don't return strings; for example, Python's `parts = text.split()` in awk is `split(text, parts)` and returns the new length of `parts`\r\n  - you can declare functions, but not local variables; apparently the convention is to add extra function arguments and just never provide them at the call site, so the function can clobber them\r\n  - all strings are byte strings, even in a UTF-8 locale (this is not true in `gawk`, but `mawk` is so much faster in general)\r\n\r\nDespite all those things, awk is still a lot more pleasant that writing POSIX shell scripts for any kind of logic or computation, and very nearly as portable. A+, would use again.","url":"https://lobste.rs/s/pci3eh/lila_lil_interpreter_awk#c_zodr3n","depth":0,"commenting_user":"Screwtape"},{"short_id":"fx5pop","short_id_url":"https://lobste.rs/c/fx5pop","created_at":"2024-05-06T16:47:43.000-05:00","updated_at":"2024-05-06T16:47:43.000-05:00","is_deleted":false,"is_moderated":false,"score":9,"flags":0,"parent_comment":"zodr3n","comment":"\u003cp\u003eWhen I first started tinkering with Awk, the feature I found most surprising was that arrays are not first-class values; you cannot, for example, construct an array within a function and return it to the caller, or store a reference to an array in an array. Instead, functions which manipulate arrays must have them passed in by reference, possibly in combination with a length. The only true “values” are strings and numbers. This limitation is understandable in light of the many ways it simplifies an implementation of Awk, but it does reduce expressiveness considerably.\u003c/p\u003e\n\u003cp\u003eThere are a number of features I’d love to see added to Awk (proper local declarations, nested function declarations, perhaps utility functions for escaping special characters in strings to aid in the construction of dynamic regex patterns?), but if such features were added to any specific Awk implementation, the scripts that used them would no longer benefit from Awk’s portability.\u003c/p\u003e\n\u003cp\u003eAwk is \u003cem\u003etantalizingly close\u003c/em\u003e to being an excellent general-purpose scripting language. At least what we have is quite useful!\u003c/p\u003e\n","comment_plain":"When I first started tinkering with Awk, the feature I found most surprising was that arrays are not first-class values; you cannot, for example, construct an array within a function and return it to the caller, or store a reference to an array in an array. Instead, functions which manipulate arrays must have them passed in by reference, possibly in combination with a length. The only true \"values\" are strings and numbers. This limitation is understandable in light of the many ways it simplifies an implementation of Awk, but it does reduce expressiveness considerably.\r\n\r\nThere are a number of features I'd love to see added to Awk (proper local declarations, nested function declarations, perhaps utility functions for escaping special characters in strings to aid in the construction of dynamic regex patterns?), but if such features were added to any specific Awk implementation, the scripts that used them would no longer benefit from Awk's portability.\r\n\r\nAwk is _tantalizingly close_ to being an excellent general-purpose scripting language. At least what we have is quite useful!","url":"https://lobste.rs/s/pci3eh/lila_lil_interpreter_awk#c_fx5pop","depth":1,"commenting_user":"Internet_Janitor"},{"short_id":"a1xnje","short_id_url":"https://lobste.rs/c/a1xnje","created_at":"2024-05-06T20:11:53.000-05:00","updated_at":"2024-05-07T00:46:08.000-05:00","is_deleted":false,"is_moderated":false,"score":4,"flags":0,"parent_comment":"fx5pop","comment":"\u003cp\u003eYeah the way I phrase that is that awk isn’t a “GC complete” language (and neither are Bourne shell, CMake, fish).   So you can’t return arrays from functions, or have recursive data structures (arrays in arrays)\u003c/p\u003e\n\u003cp\u003eReview of Awk and Make After 6 years - \u003ca href=\"https://www.oilshell.org/blog/2023/06/ysh-sketches.html#review-of-awk-and-make-after-6-years\" rel=\"ugc\"\u003ehttps://www.oilshell.org/blog/2023/06/ysh-sketches.html#review-of-awk-and-make-after-6-years\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003ewhich links back to lobste.rs: \u003ca href=\"https://lobste.rs/s/ijpr36/fascination_awk#c_9dgf4m\" rel=\"ugc\"\u003ehttps://lobste.rs/s/ijpr36/fascination_awk#c_9dgf4m\u003c/a\u003e\u003c/p\u003e\n\u003chr\u003e\n\u003cp\u003eBut implementing a language with GC in awk is surprisingliy feasible!  I didn’t quite realize that until Darius showed me this Lisp in 500 lines of Awk :)\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/darius/awklisp/blob/master/awklisp\" rel=\"ugc\"\u003ehttps://github.com/darius/awklisp/blob/master/awklisp\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eLila is similarly impressive!  \u003ca href=\"https://github.com/JohnEarnest/Decker/blob/main/tools/awk/lila.awk\" rel=\"ugc\"\u003ehttps://github.com/JohnEarnest/Decker/blob/main/tools/awk/lila.awk\u003c/a\u003e\u003c/p\u003e\n","comment_plain":"Yeah the way I phrase that is that awk isn't a \"GC complete\" language (and neither are Bourne shell, CMake, fish).   So you can't return arrays from functions, or have recursive data structures (arrays in arrays)\r\n\r\nReview of Awk and Make After 6 years - https://www.oilshell.org/blog/2023/06/ysh-sketches.html#review-of-awk-and-make-after-6-years\r\n\r\nwhich links back to lobste.rs: https://lobste.rs/s/ijpr36/fascination_awk#c_9dgf4m\r\n\r\n---\r\n\r\nBut implementing a language with GC in awk is surprisingliy feasible!  I didn't quite realize that until Darius showed me this Lisp in 500 lines of Awk :)\r\n\r\nhttps://github.com/darius/awklisp/blob/master/awklisp\r\n\r\nLila is similarly impressive!  https://github.com/JohnEarnest/Decker/blob/main/tools/awk/lila.awk","url":"https://lobste.rs/s/pci3eh/lila_lil_interpreter_awk#c_a1xnje","depth":2,"commenting_user":"andyc"},{"short_id":"kr7hv6","short_id_url":"https://lobste.rs/c/kr7hv6","created_at":"2024-05-06T23:28:15.000-05:00","updated_at":"2024-05-06T23:28:15.000-05:00","is_deleted":true,"is_moderated":false,"score":-10,"flags":0,"parent_comment":null,"comment":"\u003cem\u003eComment removed by author\u003c/em\u003e","comment_plain":"Comment removed by author","url":"https://lobste.rs/s/pci3eh/lila_lil_interpreter_awk#c_kr7hv6","depth":0,"commenting_user":"lorddimwit"},{"short_id":"6r63bs","short_id_url":"https://lobste.rs/c/6r63bs","created_at":"2024-05-07T01:56:41.000-05:00","updated_at":"2024-05-07T01:56:41.000-05:00","is_deleted":false,"is_moderated":false,"score":3,"flags":0,"parent_comment":null,"comment":"\u003cp\u003eSo Lil is a scripting language:\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://beyondloom.com/decker/learnlil.html\" rel=\"ugc\"\u003ehttps://beyondloom.com/decker/learnlil.html\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eBut there also seems to be another langauge named Lil:\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://lil-language.com/\" rel=\"ugc\"\u003ehttps://lil-language.com/\u003c/a\u003e\u003c/p\u003e\n","comment_plain":"So Lil is a scripting language:\r\n\r\nhttps://beyondloom.com/decker/learnlil.html\r\n\r\nBut there also seems to be another langauge named Lil:\r\n\r\nhttps://lil-language.com/","url":"https://lobste.rs/s/pci3eh/lila_lil_interpreter_awk#c_6r63bs","depth":0,"commenting_user":"kas"},{"short_id":"lbrxl7","short_id_url":"https://lobste.rs/c/lbrxl7","created_at":"2024-05-07T14:10:54.000-05:00","updated_at":"2024-05-07T14:10:54.000-05:00","is_deleted":false,"is_moderated":false,"score":3,"flags":0,"parent_comment":"6r63bs","comment":"\u003cp\u003eFor the record, I started designing and implementing Decker’s Lil (Learning In Layers) at roughly the same time Miro started his Lil (Lil Is a Language), and was not aware of his language until well after Decker’s release years later. The appearance, features, and application domains of these languages are dramatically distinct, and I do not believe anyone is likely to confuse them in practice. At any rate, the GitHub repository for Miro’s “Lil” does not appear to have been updated in two years, so it’s unclear whether the project is still active.\u003c/p\u003e\n\u003cp\u003eBoth of these contemporary Lils are also substantially predated by Kostas Michalopoulos’ “\u003ca href=\"https://github.com/wsxiaoys/lil\" rel=\"ugc\"\u003eLittle Interpreted Language\u003c/a\u003e”, a TCL-like, and in turn P. J. Plauger’s \u003ca href=\"https://en.wikipedia.org/wiki/Little_Implementation_Language\" rel=\"ugc\"\u003eLittle Implementation Language\u003c/a\u003e.\u003c/p\u003e\n","comment_plain":"For the record, I started designing and implementing Decker's Lil (Learning In Layers) at roughly the same time Miro started his Lil (Lil Is a Language), and was not aware of his language until well after Decker's release years later. The appearance, features, and application domains of these languages are dramatically distinct, and I do not believe anyone is likely to confuse them in practice. At any rate, the GitHub repository for Miro's \"Lil\" does not appear to have been updated in two years, so it's unclear whether the project is still active.\r\n\r\nBoth of these contemporary Lils are also substantially predated by Kostas Michalopoulos' \"[Little Interpreted Language](https://github.com/wsxiaoys/lil)\", a TCL-like, and in turn P. J. Plauger's [Little Implementation Language](https://en.wikipedia.org/wiki/Little_Implementation_Language).","url":"https://lobste.rs/s/pci3eh/lila_lil_interpreter_awk#c_lbrxl7","depth":1,"commenting_user":"Internet_Janitor"},{"short_id":"xbbwfd","short_id_url":"https://lobste.rs/c/xbbwfd","created_at":"2024-05-08T04:13:13.000-05:00","updated_at":"2024-05-08T04:13:13.000-05:00","is_deleted":false,"is_moderated":false,"score":2,"flags":0,"parent_comment":"lbrxl7","comment":"\u003cp\u003eUntil yesterday I didn’t even know that there was a programming language named Lil, but it did sound interesting, and I was surprise to learn that there is more than one programming language that make claim to the name. And you even mention a third that goes by the same [abbreviated] name. Thanks for enlightening us.\u003c/p\u003e\n","comment_plain":"Until yesterday I didn't even know that there was a programming language named Lil, but it did sound interesting, and I was surprise to learn that there is more than one programming language that make claim to the name. And you even mention a third that goes by the same [abbreviated] name. Thanks for enlightening us.","url":"https://lobste.rs/s/pci3eh/lila_lil_interpreter_awk#c_xbbwfd","depth":2,"commenting_user":"kas"},{"short_id":"kcbu6y","short_id_url":"https://lobste.rs/c/kcbu6y","created_at":"2024-05-07T07:54:09.000-05:00","updated_at":"2024-05-07T07:54:09.000-05:00","is_deleted":false,"is_moderated":false,"score":2,"flags":0,"parent_comment":null,"comment":"\u003cp\u003eThis is just lovely. Both the interpreter, and decker and lila :)\u003c/p\u003e\n","comment_plain":"This is just lovely. Both the interpreter, and decker and lila :)","url":"https://lobste.rs/s/pci3eh/lila_lil_interpreter_awk#c_kcbu6y","depth":0,"commenting_user":"alexmu"}]}